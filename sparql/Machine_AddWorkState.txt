PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX factory: <https://w3id.org/ontoeng/factory#>
PREFIX ifcext: <https://w3id.org/ontoeng/IFC4_ADD1_extension#>
PREFIX fsm: <http://www.learninglab.de/~dolog/fsm/fsm.owl#>
PREFIX osph: <https://w3id.org/ontoeng/osph#>

DELETE{
}
INSERT { 
	GRAPH ?h { 
		?newWorkState a owl:NamedIndividual , factory:MachineToolWorkingState .
		?trIdleWork a owl:NamedIndividual , fsm:Transition .
		?trWorkFinal a owl:NamedIndividual , fsm:Transition .
		?guardTrIdleWork a owl:NamedIndividual , fsm:Guard .
		?startOp a owl:NamedIndividual , factory:MachineToolStartOperation .
		?doPStep a owl:NamedIndividual , ?pstepClass .
		
		?stM fsm:contains ?trIdleWork ,?guardTrIdleWork , ?startOp.
		?stM fsm:contains ?trWorkFinal, ?trInitIdle.
		?workState fsm:hasStateMachineElement ?newWorkState .
		?trIdleWork fsm:Source ?idleReg .
		?trIdleWork fsm:Target ?newWorkState .
		?trIdleWork fsm:TransitionGuard ?guardTrIdleWork .
		?guardTrIdleWork fsm:GuardEvent ?startOp .
		
		?trWorkFinal fsm:Source ?newWorkState .
		?trWorkFinal fsm:Target ?finalSt .
		
		?newWorkState osph:do ?doPStep .
		?doPStep ifcext:isDefinedByObject ?pstep .
		
		?newReg a owl:NamedIndividual , fsm:Region .
		?initReg a owl:NamedIndividual , fsm:Initial .
		?blockedReg a owl:NamedIndividual , factory:MachineToolBlockedState .
		?starvedReg a owl:NamedIndividual , factory:MachineToolStarvedState .
		?idleReg a owl:NamedIndividual , factory:MachineToolIdleState .
		?trInitIdle a owl:NamedIndividual  , fsm:Transition .
		
		?idleComp fsm:hasStateMachineElement ?newReg .		
		?newReg fsm:hasStateMachineElement ?initReg ,
			?blockedReg ,
			?starvedReg ,
			?idleReg .
		?trInitIdle fsm:Source ?initReg .
		?trInitIdle fsm:Target ?idleReg .
	
	}
}
WHERE {

	# State machine of elem
	?itsClass rdfs:subClassOf* factory:MachineTool .
	GRAPH ?h { ?elem rdf:type ?itsClass . }
	?elem osph:hasStateMachine ?stM .	
	
	?stM fsm:contains ?workState , ?idleComp, ?trWorkIdle .
	?idleComp a fsm:Composite .
	?workState a fsm:Composite . 			
	?trWorkIdle a fsm:Transition .
	?trWorkIdle fsm:Source ?workState .
	?trWorkIdle fsm:Target ?idleComp .	
	
	?initOverall a fsm:Initial .
	?trInitCompIdle fsm:Source ?initOverall .
	?trInitCompIdle fsm:Target ?idleComp .
		
	OPTIONAL{
		?workState fsm:hasStateMachineElement ?finalSt .
		?finalSt a fsm:Final .
	}
	#?idleComp fsm:hasStateMachineElement ?idleSt .
	#?idleSt a factory:MachineToolIdleState .

	?pstep a ?pstepClass .
	FILTER ( ?pstepClass != owl:NamedIndividual ) .

	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_",STRAFTER(STR(?pstep),"#"))),?null) AS ?newWorkState ) .  
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_do_",STRAFTER(STR(?pstep),"#"))),?null) AS ?doPStep ) . 
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_start_",STRAFTER(STR(?pstep),"#"))),?null) AS ?startOp ) . 
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_trIdleWork_",STRAFTER(STR(?pstep),"#"))),?null) AS ?trIdleWork ) . 
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_guardIdleWork_",STRAFTER(STR(?pstep),"#"))),?null) AS ?guardTrIdleWork ) . 
	BIND(IF(bound(?finalSt), URI(CONCAT(STR(?elem),"_trWorkFinal_",STRAFTER(STR(?pstep),"#"))),?null) AS ?trWorkFinal ) . 

	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_reg_",STRAFTER(STR(?pstep),"#"))),?null) AS ?newReg ) .  
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_regInit_",STRAFTER(STR(?pstep),"#"))),?null) AS ?initReg ) .  
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_idle_",STRAFTER(STR(?pstep),"#"))),?null) AS ?idleReg ) .  
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_stv_",STRAFTER(STR(?pstep),"#"))),?null) AS ?starvedReg ) .  
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_blk_",STRAFTER(STR(?pstep),"#"))),?null) AS ?blockedReg ) .  
	BIND(IF(bound(?stM), URI(CONCAT(STR(?elem),"_trInitIdle_",STRAFTER(STR(?pstep),"#"))),?null) AS ?trInitIdle ) .  
		
	

}